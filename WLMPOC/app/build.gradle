apply plugin: 'com.android.application'
class MyFlavor {
    public String flavorname;
    public String basename;
    public String appid;
    public String appname;
    public String color_primary;
    public String button_color;
    public String description
    public String color_primaryDark
}

def ArrayList<MyFlavor> myFlavors = new ArrayList<>();



    def parsedProjectXml = (new XmlParser()).parse('app/document.xml')
    parsedProjectXml.'CustomerConfiguration'.each{ config ->

        MyFlavor f = new MyFlavor();
        f.flavorname = config.CustomerCode.text()+"_"+config.CustomerName.text();
        f.basename = config.CustomerName.text()+config.CustomerCode.text();
        f.appid = config.AppPackageName.text();
        f.appname=config.CustomerName.text();
        f.color_primary=config.ConfigurableColor[0].HeaderColor[0].text();
        f.button_color=config.ConfigurableColor[0].ButtonColor[0].text();
        f.color_primaryDark=config.ConfigurableColor[0].NotificationBarColor[0].text();
        f.description="This is "+config.CustomerName.text();
        myFlavors.add(f);

    }
//new File('app/Book.csv').eachLine {
//    String[] values = "$it".split(',');
//    MyFlavor f = new MyFlavor();
//    f.flavorname = values[0];
//    f.basename = values[0].split('_')[0];
//    f.appid = values[1];
//    f.appname=values[2];
//    f.color_primary=values[3]
//    f.button_color=values[4]
//    f.description=values[5]
//    myFlavors.add(f);
//}
android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "com.wlmpoc"
        minSdkVersion 15
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    productFlavors {
        myFlavors.each { MyFlavor f ->
            "$f.flavorname" {
                applicationId = "$f.appid"
                resValue  'string', 'app_name', "\"" + "$f.appname" + "\""
                resValue  'string', 'description', "\"" + "$f.description" + "\""
                resValue  'color', 'colorPrimary', "$f.color_primary"
                resValue  'color', 'colorPrimaryDark', "$f.color_primaryDark"
                resValue  'color', 'button_color', "$f.button_color"
            }
        }
    }
    sourceSets {
        myFlavors.each { MyFlavor f ->
            "$f.flavorname" {
                assets.srcDirs = ['repo-assets/' + "$f.basename"]
                res.srcDirs = ['repo-mipmap/' + "$f.basename" , 'repo-strings/' + "$f.flavorname"]

            }

        }
    }
	  lintOptions {
        abortOnError false
    }
}


dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.+'
    compile 'com.android.support:design:26.+'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
	compile 'me.dm7.barcodescanner:zxing:1.9.3'
    testCompile 'junit:junit:4.12'
}
